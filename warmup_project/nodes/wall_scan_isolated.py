class GeneralClass(object):
	def __init__(self):
		self.wall_point_threshold = 15
		self.wall_gap_threshold = 10
		self.ranges = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.621999979019165, 2.630000114440918, 2.619999885559082, 2.615000009536743, 2.622999906539917, 2.61299991607666, 2.625, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.5510001182556152, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8960000276565552, 1.9170000553131104, 0.0, 1.906999945640564, 1.8910000324249268, 1.8799999952316284, 1.8600000143051147, 1.847000002861023, 1.8320000171661377, 1.8259999752044678, 1.8209999799728394, 1.784999966621399, 1.809999942779541, 1.774999976158142, 1.784000039100647, 1.777999997138977, 1.7580000162124634, 1.7339999675750732, 1.7410000562667847, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.687000036239624, 1.6369999647140503, 1.559000015258789, 1.503000020980835, 1.4570000171661377, 1.4040000438690186, 1.3589999675750732, 1.3179999589920044, 1.274999976158142, 1.2410000562667847, 1.2059999704360962, 1.1729999780654907, 1.1430000066757202, 1.1139999628067017, 1.0880000591278076, 1.0640000104904175, 1.0410000085830688, 1.0219999551773071, 1.0019999742507935, 0.9860000014305115, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8679999709129333, 0.8529999852180481, 0.8429999947547913, 0.8330000042915344, 0.8230000138282776, 0.8109999895095825, 0.800000011920929, 0.7910000085830688, 0.781000018119812, 0.7710000276565552, 0.7620000243186951, 0.753000020980835, 0.7459999918937683, 0.7369999885559082, 0.7300000190734863, 0.722000002861023, 0.7149999737739563, 0.7099999785423279, 0.7039999961853027, 0.6980000138282776, 0.6919999718666077, 0.6869999766349792, 0.6809999942779541, 0.6769999861717224, 0.671999990940094, 0.6679999828338623, 0.6639999747276306, 0.6610000133514404, 0.6570000052452087, 0.6539999842643738, 0.6510000228881836, 0.6489999890327454, 0.6460000276565552, 0.6430000066757202, 0.640999972820282, 0.6389999985694885, 0.6370000243186951, 0.6359999775886536, 0.6349999904632568, 0.6330000162124634, 0.6320000290870667, 0.6320000290870667, 0.6309999823570251, 0.6290000081062317, 0.625, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6539999842643738, 0.6470000147819519, 0.6439999938011169, 0.6439999938011169, 0.6470000147819519, 0.6499999761581421, 0.6520000100135803, 0.6549999713897705, 0.6589999794960022, 0.6620000004768372, 0.6660000085830688, 0.6700000166893005, 0.675000011920929, 0.6790000200271606, 0.6850000023841858, 0.6890000104904175, 0.6959999799728394, 0.7009999752044678, 0.7070000171661377, 0.7139999866485596, 0.7200000286102295, 0.7279999852180481, 0.7360000014305115, 0.746999979019165, 0.7590000033378601, 0.7699999809265137, 0.0, 0.0, 0.0, 0.0, 0.8050000071525574, 0.8190000057220459, 0.8349999785423279, 0.8510000109672546, 0.8650000095367432, 0.8809999823570251, 0.8980000019073486, 0.9160000085830688, 0.9319999814033508, 0.9520000219345093, 0.9710000157356262, 0.9909999966621399, 1.0149999856948853, 1.0360000133514404, 1.0640000104904175, 1.1030000448226929, 1.1360000371932983, 1.1619999408721924, 1.1990000009536743, 1.2309999465942383, 1.277999997138977, 1.3240000009536743, 1.36899995803833, 1.3890000581741333, 1.437000036239624, 1.4930000305175781, 1.5540000200271606, 1.6230000257492065, 1.6929999589920044, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

	def find_walls(self):

			# Do not run without LIDAR data
			if self.ranges == []:
				return
				
			self.ranges_backup = self.ranges
			self.wall_ranges = self.ranges
			self.wall_debug = ["*"] * len(self.ranges)

			print "wall_ranges:", self.wall_ranges

			i = 0
			# Iterate by each index, allowing for index jumps.
			while i < len(self.wall_ranges):
				print "i:", i, "val:", self.wall_ranges[i]

				# If the point could be part of a wall:
				if self.wall_ranges[i] != 0:
					is_wall = True
					

					# Check the pts following the first valid pt (i), to see if
					# object is a wall
					last = i 				# Last valid pt
					w = i					# index for "checking" iteration
					g = 0					# Count the # of "gaps" (distance = 0)

					while is_wall:
						print "		w:", w, "val:", self.wall_ranges[w]
						
						# If the value is zero, its a gap, increase gap count
						if self.wall_ranges[w] == 0:
							g = g + 1

						# If the value is not zero, the gap is closed.
						else:
							g = 0
							last = w

						# print "		w:", w
						# print "			val:", self.wall_ranges[w] 
						# print "		g:", g
						# print "		last:", last

						# If the number of gaps exceeds the threshold, stop counting
						if g > self.wall_gap_threshold:
							is_wall = False
							print "		wall found: ["+ str(i) + "," + str(last) + "]"
							break
						w = w + 1

					# If the # of gaps is less than the # of allowed gaps
					#	Consider the whole section a wall, filling in where
					#	there were gaps with an updating average.
					if g < self.wall_gap_threshold:
						# print "wall found: ["+ str(i) + "," + str(last) + "]"
						
						a = 1.0
						avg = self.wall_ranges[i] * 1.0
						for n in range(i, last):
							if self.wall_ranges[n] == 0:
								self.wall_ranges[n] = avg
							else:
								# Update the average
								avg = (avg*a + self.wall_ranges[n]) / (a+1)
								a = a + 1

					i = last + 1

				else:
					i = i + 1

			print ""
			print ""
			print "raw__ranges:", self.ranges
			print "wall_ranges:", self.wall_ranges

if __name__ == '__main__':
	gen_class = GeneralClass()
	gen_class.find_walls()
